
AVR_LED_0_OUTPUT_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000324  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000030f  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "DIO_Reg.h"
#include "utilities.h"

//#include<avr/delay.h>

int main(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62

	// HW init
	set_bit(DDRC, 2); // output
  76:	a4 e3       	ldi	r26, 0x34	; 52
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	84 60       	ori	r24, 0x04	; 4
  82:	8c 93       	st	X, r24
	set_bit(DDRC, 7);
  84:	a4 e3       	ldi	r26, 0x34	; 52
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e4 e3       	ldi	r30, 0x34	; 52
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8c 93       	st	X, r24
	set_bit(DDRD, 3);
  92:	a1 e3       	ldi	r26, 0x31	; 49
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e1 e3       	ldi	r30, 0x31	; 49
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	8c 93       	st	X, r24

	clear_bit(DDRD, 2);
  a0:	a1 e3       	ldi	r26, 0x31	; 49
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e1 e3       	ldi	r30, 0x31	; 49
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8b 7f       	andi	r24, 0xFB	; 251
  ac:	8c 93       	st	X, r24
	clear_bit(DDRD, 6); // input
  ae:	a1 e3       	ldi	r26, 0x31	; 49
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e1 e3       	ldi	r30, 0x31	; 49
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8f 7b       	andi	r24, 0xBF	; 191
  ba:	8c 93       	st	X, r24
//	set_bit(PORTD, 2); // internal pull-up resistor
	 u8 counter = 0;
  bc:	19 82       	std	Y+1, r1	; 0x01

	// super loop
	while(1)
	{
		if(((get_bit(PIND, 2)) == 1) && counter < 7)
  be:	e0 e3       	ldi	r30, 0x30	; 48
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	86 95       	lsr	r24
  c6:	86 95       	lsr	r24
  c8:	88 2f       	mov	r24, r24
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	90 70       	andi	r25, 0x00	; 0
  d0:	88 23       	and	r24, r24
  d2:	09 f4       	brne	.+2      	; 0xd6 <main+0x6a>
  d4:	57 c0       	rjmp	.+174    	; 0x184 <main+0x118>
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	87 30       	cpi	r24, 0x07	; 7
  da:	08 f0       	brcs	.+2      	; 0xde <main+0x72>
  dc:	53 c0       	rjmp	.+166    	; 0x184 <main+0x118>
		{
			while((get_bit(PIND, 2)) == 1);
  de:	e0 e3       	ldi	r30, 0x30	; 48
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	86 95       	lsr	r24
  e6:	86 95       	lsr	r24
  e8:	88 2f       	mov	r24, r24
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	81 70       	andi	r24, 0x01	; 1
  ee:	90 70       	andi	r25, 0x00	; 0
  f0:	88 23       	and	r24, r24
  f2:	a9 f7       	brne	.-22     	; 0xde <main+0x72>
			counter++;
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	89 83       	std	Y+1, r24	; 0x01

			if(get_bit(counter, 0))
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	88 2f       	mov	r24, r24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	81 70       	andi	r24, 0x01	; 1
 102:	90 70       	andi	r25, 0x00	; 0
 104:	88 23       	and	r24, r24
 106:	41 f0       	breq	.+16     	; 0x118 <main+0xac>
				set_bit(PORTC, 2);
 108:	a5 e3       	ldi	r26, 0x35	; 53
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e5 e3       	ldi	r30, 0x35	; 53
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	84 60       	ori	r24, 0x04	; 4
 114:	8c 93       	st	X, r24
 116:	07 c0       	rjmp	.+14     	; 0x126 <main+0xba>
			else
				clear_bit(PORTC,2);
 118:	a5 e3       	ldi	r26, 0x35	; 53
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e5 e3       	ldi	r30, 0x35	; 53
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8b 7f       	andi	r24, 0xFB	; 251
 124:	8c 93       	st	X, r24

			if(get_bit(counter, 1))
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	86 95       	lsr	r24
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	90 70       	andi	r25, 0x00	; 0
 132:	88 23       	and	r24, r24
 134:	41 f0       	breq	.+16     	; 0x146 <main+0xda>
				set_bit(PORTC, 7);
 136:	a5 e3       	ldi	r26, 0x35	; 53
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	e5 e3       	ldi	r30, 0x35	; 53
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 68       	ori	r24, 0x80	; 128
 142:	8c 93       	st	X, r24
 144:	07 c0       	rjmp	.+14     	; 0x154 <main+0xe8>
			else
				clear_bit(PORTC,7);
 146:	a5 e3       	ldi	r26, 0x35	; 53
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	e5 e3       	ldi	r30, 0x35	; 53
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8f 77       	andi	r24, 0x7F	; 127
 152:	8c 93       	st	X, r24

			if(get_bit(counter, 2))
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	86 95       	lsr	r24
 158:	86 95       	lsr	r24
 15a:	88 2f       	mov	r24, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	81 70       	andi	r24, 0x01	; 1
 160:	90 70       	andi	r25, 0x00	; 0
 162:	88 23       	and	r24, r24
 164:	41 f0       	breq	.+16     	; 0x176 <main+0x10a>
				set_bit(PORTD, 3);
 166:	a2 e3       	ldi	r26, 0x32	; 50
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e2 e3       	ldi	r30, 0x32	; 50
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 60       	ori	r24, 0x08	; 8
 172:	8c 93       	st	X, r24
 174:	07 c0       	rjmp	.+14     	; 0x184 <main+0x118>
			else
				clear_bit(PORTD,3);
 176:	a2 e3       	ldi	r26, 0x32	; 50
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	e2 e3       	ldi	r30, 0x32	; 50
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	8c 93       	st	X, r24
		}


		if(((get_bit(PIND, 6)) == 1) && counter > 0)
 184:	e0 e3       	ldi	r30, 0x30	; 48
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	82 95       	swap	r24
 18c:	86 95       	lsr	r24
 18e:	86 95       	lsr	r24
 190:	83 70       	andi	r24, 0x03	; 3
 192:	88 2f       	mov	r24, r24
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	81 70       	andi	r24, 0x01	; 1
 198:	90 70       	andi	r25, 0x00	; 0
 19a:	88 23       	and	r24, r24
 19c:	09 f4       	brne	.+2      	; 0x1a0 <main+0x134>
 19e:	8f cf       	rjmp	.-226    	; 0xbe <main+0x52>
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	88 23       	and	r24, r24
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <main+0x13c>
 1a6:	8b cf       	rjmp	.-234    	; 0xbe <main+0x52>
		{
			while((get_bit(PIND, 6)) == 1);
 1a8:	e0 e3       	ldi	r30, 0x30	; 48
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	82 95       	swap	r24
 1b0:	86 95       	lsr	r24
 1b2:	86 95       	lsr	r24
 1b4:	83 70       	andi	r24, 0x03	; 3
 1b6:	88 2f       	mov	r24, r24
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	81 70       	andi	r24, 0x01	; 1
 1bc:	90 70       	andi	r25, 0x00	; 0
 1be:	88 23       	and	r24, r24
 1c0:	99 f7       	brne	.-26     	; 0x1a8 <main+0x13c>
			counter--;
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	81 50       	subi	r24, 0x01	; 1
 1c6:	89 83       	std	Y+1, r24	; 0x01

			if(get_bit(counter, 0))
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	88 2f       	mov	r24, r24
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	81 70       	andi	r24, 0x01	; 1
 1d0:	90 70       	andi	r25, 0x00	; 0
 1d2:	88 23       	and	r24, r24
 1d4:	41 f0       	breq	.+16     	; 0x1e6 <main+0x17a>
				set_bit(PORTC, 2);
 1d6:	a5 e3       	ldi	r26, 0x35	; 53
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e5 e3       	ldi	r30, 0x35	; 53
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	8c 93       	st	X, r24
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <main+0x188>
			else
				clear_bit(PORTC,2);
 1e6:	a5 e3       	ldi	r26, 0x35	; 53
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e5 e3       	ldi	r30, 0x35	; 53
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	8c 93       	st	X, r24

			if(get_bit(counter, 1))
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	86 95       	lsr	r24
 1f8:	88 2f       	mov	r24, r24
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	81 70       	andi	r24, 0x01	; 1
 1fe:	90 70       	andi	r25, 0x00	; 0
 200:	88 23       	and	r24, r24
 202:	41 f0       	breq	.+16     	; 0x214 <main+0x1a8>
				set_bit(PORTC, 7);
 204:	a5 e3       	ldi	r26, 0x35	; 53
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e5 e3       	ldi	r30, 0x35	; 53
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8c 93       	st	X, r24
 212:	07 c0       	rjmp	.+14     	; 0x222 <main+0x1b6>
			else
				clear_bit(PORTC,7);
 214:	a5 e3       	ldi	r26, 0x35	; 53
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	e5 e3       	ldi	r30, 0x35	; 53
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8f 77       	andi	r24, 0x7F	; 127
 220:	8c 93       	st	X, r24

			if(get_bit(counter, 2))
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	86 95       	lsr	r24
 226:	86 95       	lsr	r24
 228:	88 2f       	mov	r24, r24
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	81 70       	andi	r24, 0x01	; 1
 22e:	90 70       	andi	r25, 0x00	; 0
 230:	88 23       	and	r24, r24
 232:	41 f0       	breq	.+16     	; 0x244 <main+0x1d8>
				set_bit(PORTD, 3);
 234:	a2 e3       	ldi	r26, 0x32	; 50
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e2 e3       	ldi	r30, 0x32	; 50
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	8c 93       	st	X, r24
 242:	3d cf       	rjmp	.-390    	; 0xbe <main+0x52>
			else
				clear_bit(PORTD,3);
 244:	a2 e3       	ldi	r26, 0x32	; 50
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e2 e3       	ldi	r30, 0x32	; 50
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	8c 93       	st	X, r24
 252:	35 cf       	rjmp	.-406    	; 0xbe <main+0x52>

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>

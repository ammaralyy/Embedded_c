
ADC_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000ef4  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a04  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 0a 04 	call	0x814	; 0x814 <main>
  64:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_INIT>:
#include "ADC_init.h"

#include<avr/delay.h>

void ADC_INIT()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	set_bit(ADMUX, 6); //
  74:	a7 e2       	ldi	r26, 0x27	; 39
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e2       	ldi	r30, 0x27	; 39
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
	clear_bit(ADMUX, 7); // external ... set this to 1 to external volte 5
  82:	a7 e2       	ldi	r26, 0x27	; 39
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e2       	ldi	r30, 0x27	; 39
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 77       	andi	r24, 0x7F	; 127
  8e:	8c 93       	st	X, r24

	clear_bit(ADMUX, 5); // right adjust if 1 left
  90:	a7 e2       	ldi	r26, 0x27	; 39
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e7 e2       	ldi	r30, 0x27	; 39
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 7d       	andi	r24, 0xDF	; 223
  9c:	8c 93       	st	X, r24

	set_bit(ADCSRA, 0);
  9e:	a6 e2       	ldi	r26, 0x26	; 38
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e6 e2       	ldi	r30, 0x26	; 38
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8c 93       	st	X, r24
	set_bit(ADCSRA, 1); // prescaler 8
  ac:	a6 e2       	ldi	r26, 0x26	; 38
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e6 e2       	ldi	r30, 0x26	; 38
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	8c 93       	st	X, r24
	clear_bit(ADCSRA, 2);
  ba:	a6 e2       	ldi	r26, 0x26	; 38
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e6 e2       	ldi	r30, 0x26	; 38
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	8c 93       	st	X, r24

	set_bit(ADMUX, 0);
  c8:	a7 e2       	ldi	r26, 0x27	; 39
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e7 e2       	ldi	r30, 0x27	; 39
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8c 93       	st	X, r24
	clear_bit(ADMUX, 1);
  d6:	a7 e2       	ldi	r26, 0x27	; 39
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e7 e2       	ldi	r30, 0x27	; 39
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	8c 93       	st	X, r24
	clear_bit(ADMUX, 2); // chanel 1
  e4:	a7 e2       	ldi	r26, 0x27	; 39
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e7 e2       	ldi	r30, 0x27	; 39
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	8b 7f       	andi	r24, 0xFB	; 251
  f0:	8c 93       	st	X, r24
	clear_bit(ADMUX, 3);
  f2:	a7 e2       	ldi	r26, 0x27	; 39
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e7 e2       	ldi	r30, 0x27	; 39
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	8c 93       	st	X, r24
	clear_bit(ADMUX, 4);
 100:	a7 e2       	ldi	r26, 0x27	; 39
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	e7 e2       	ldi	r30, 0x27	; 39
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 7e       	andi	r24, 0xEF	; 239
 10c:	8c 93       	st	X, r24

	set_bit(ADCSRA, 7); // enable adc
 10e:	a6 e2       	ldi	r26, 0x26	; 38
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e6 e2       	ldi	r30, 0x26	; 38
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8c 93       	st	X, r24

}
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <ADC_READ>:

u16 ADC_READ()
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	00 d0       	rcall	.+0      	; 0x128 <ADC_READ+0x6>
 128:	00 d0       	rcall	.+0      	; 0x12a <ADC_READ+0x8>
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_VALUE = 0, ADC_LOW;
 12e:	1c 82       	std	Y+4, r1	; 0x04
 130:	1b 82       	std	Y+3, r1	; 0x03

	set_bit(ADCSRA, 6); //start conversion
 132:	a6 e2       	ldi	r26, 0x26	; 38
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e6 e2       	ldi	r30, 0x26	; 38
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	8c 93       	st	X, r24

	while((get_bit(ADCSRA, 4)) == 0); // conversion loop
 140:	e6 e2       	ldi	r30, 0x26	; 38
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	82 95       	swap	r24
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	88 2f       	mov	r24, r24
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	81 70       	andi	r24, 0x01	; 1
 150:	90 70       	andi	r25, 0x00	; 0
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	a9 f3       	breq	.-22     	; 0x140 <ADC_READ+0x1e>

	set_bit(ADCSRA, 4); // clear flag note : set 1 to be cleared (hw specific)
 156:	a6 e2       	ldi	r26, 0x26	; 38
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e6 e2       	ldi	r30, 0x26	; 38
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 61       	ori	r24, 0x10	; 16
 162:	8c 93       	st	X, r24

	ADC_LOW = (u16)ADCL;
 164:	e4 e2       	ldi	r30, 0x24	; 36
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	88 2f       	mov	r24, r24
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9a 83       	std	Y+2, r25	; 0x02
 170:	89 83       	std	Y+1, r24	; 0x01
	ADC_VALUE = ADCH << 8;
 172:	e5 e2       	ldi	r30, 0x25	; 37
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	98 2f       	mov	r25, r24
 17e:	88 27       	eor	r24, r24
 180:	9c 83       	std	Y+4, r25	; 0x04
 182:	8b 83       	std	Y+3, r24	; 0x03
	ADC_VALUE = ADC_VALUE | ADC_LOW ;
 184:	2b 81       	ldd	r18, Y+3	; 0x03
 186:	3c 81       	ldd	r19, Y+4	; 0x04
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	82 2b       	or	r24, r18
 18e:	93 2b       	or	r25, r19
 190:	9c 83       	std	Y+4, r25	; 0x04
 192:	8b 83       	std	Y+3, r24	; 0x03

	return ADC_VALUE;
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	9c 81       	ldd	r25, Y+4	; 0x04
}
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	cf 91       	pop	r28
 1a2:	df 91       	pop	r29
 1a4:	08 95       	ret

000001a6 <Dio_SetPinDirection>:
#include "utilities.h"

#include "Dio_Int.h"

void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
 1a6:	df 93       	push	r29
 1a8:	cf 93       	push	r28
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	27 97       	sbiw	r28, 0x07	; 7
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	6a 83       	std	Y+2, r22	; 0x02
 1be:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD)&&(PinNo<=PIN7))
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	84 30       	cpi	r24, 0x04	; 4
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <Dio_SetPinDirection+0x22>
 1c6:	ed c0       	rjmp	.+474    	; 0x3a2 <Dio_SetPinDirection+0x1fc>
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	88 30       	cpi	r24, 0x08	; 8
 1cc:	08 f0       	brcs	.+2      	; 0x1d0 <Dio_SetPinDirection+0x2a>
 1ce:	e9 c0       	rjmp	.+466    	; 0x3a2 <Dio_SetPinDirection+0x1fc>
	{
	if(Direction==INPUT)
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	88 23       	and	r24, r24
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <Dio_SetPinDirection+0x32>
 1d6:	73 c0       	rjmp	.+230    	; 0x2be <Dio_SetPinDirection+0x118>
	{
		switch(GroupNo)
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	3f 83       	std	Y+7, r19	; 0x07
 1e0:	2e 83       	std	Y+6, r18	; 0x06
 1e2:	8e 81       	ldd	r24, Y+6	; 0x06
 1e4:	9f 81       	ldd	r25, Y+7	; 0x07
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 05       	cpc	r25, r1
 1ea:	59 f1       	breq	.+86     	; 0x242 <Dio_SetPinDirection+0x9c>
 1ec:	2e 81       	ldd	r18, Y+6	; 0x06
 1ee:	3f 81       	ldd	r19, Y+7	; 0x07
 1f0:	22 30       	cpi	r18, 0x02	; 2
 1f2:	31 05       	cpc	r19, r1
 1f4:	2c f4       	brge	.+10     	; 0x200 <Dio_SetPinDirection+0x5a>
 1f6:	8e 81       	ldd	r24, Y+6	; 0x06
 1f8:	9f 81       	ldd	r25, Y+7	; 0x07
 1fa:	00 97       	sbiw	r24, 0x00	; 0
 1fc:	69 f0       	breq	.+26     	; 0x218 <Dio_SetPinDirection+0x72>
 1fe:	5f c0       	rjmp	.+190    	; 0x2be <Dio_SetPinDirection+0x118>
 200:	2e 81       	ldd	r18, Y+6	; 0x06
 202:	3f 81       	ldd	r19, Y+7	; 0x07
 204:	22 30       	cpi	r18, 0x02	; 2
 206:	31 05       	cpc	r19, r1
 208:	89 f1       	breq	.+98     	; 0x26c <Dio_SetPinDirection+0xc6>
 20a:	8e 81       	ldd	r24, Y+6	; 0x06
 20c:	9f 81       	ldd	r25, Y+7	; 0x07
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	91 05       	cpc	r25, r1
 212:	09 f4       	brne	.+2      	; 0x216 <Dio_SetPinDirection+0x70>
 214:	40 c0       	rjmp	.+128    	; 0x296 <Dio_SetPinDirection+0xf0>
 216:	53 c0       	rjmp	.+166    	; 0x2be <Dio_SetPinDirection+0x118>
		{
		case GroupA: clear_bit(DDRA, PinNo); break;
 218:	aa e3       	ldi	r26, 0x3A	; 58
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	ea e3       	ldi	r30, 0x3A	; 58
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <Dio_SetPinDirection+0x90>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <Dio_SetPinDirection+0x8c>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	3e c0       	rjmp	.+124    	; 0x2be <Dio_SetPinDirection+0x118>
		case GroupB: clear_bit(DDRB, PinNo); break;
 242:	a7 e3       	ldi	r26, 0x37	; 55
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e7 e3       	ldi	r30, 0x37	; 55
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <Dio_SetPinDirection+0xba>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <Dio_SetPinDirection+0xb6>
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8c 93       	st	X, r24
 26a:	29 c0       	rjmp	.+82     	; 0x2be <Dio_SetPinDirection+0x118>
		case GroupC: clear_bit(DDRC, PinNo); break;
 26c:	a4 e3       	ldi	r26, 0x34	; 52
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e4 e3       	ldi	r30, 0x34	; 52
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	48 2f       	mov	r20, r24
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 2e       	mov	r0, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <Dio_SetPinDirection+0xe4>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <Dio_SetPinDirection+0xe0>
 28e:	80 95       	com	r24
 290:	84 23       	and	r24, r20
 292:	8c 93       	st	X, r24
 294:	14 c0       	rjmp	.+40     	; 0x2be <Dio_SetPinDirection+0x118>
		case GroupD: clear_bit(DDRD, PinNo); break;
 296:	a1 e3       	ldi	r26, 0x31	; 49
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e1 e3       	ldi	r30, 0x31	; 49
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	48 2f       	mov	r20, r24
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 2e       	mov	r0, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <Dio_SetPinDirection+0x10e>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <Dio_SetPinDirection+0x10a>
 2b8:	80 95       	com	r24
 2ba:	84 23       	and	r24, r20
 2bc:	8c 93       	st	X, r24
		}
	}
	if(Direction==OUTPUT)
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <Dio_SetPinDirection+0x120>
 2c4:	6e c0       	rjmp	.+220    	; 0x3a2 <Dio_SetPinDirection+0x1fc>
	{
		switch(GroupNo)
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	3d 83       	std	Y+5, r19	; 0x05
 2ce:	2c 83       	std	Y+4, r18	; 0x04
 2d0:	8c 81       	ldd	r24, Y+4	; 0x04
 2d2:	9d 81       	ldd	r25, Y+5	; 0x05
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	91 05       	cpc	r25, r1
 2d8:	49 f1       	breq	.+82     	; 0x32c <Dio_SetPinDirection+0x186>
 2da:	2c 81       	ldd	r18, Y+4	; 0x04
 2dc:	3d 81       	ldd	r19, Y+5	; 0x05
 2de:	22 30       	cpi	r18, 0x02	; 2
 2e0:	31 05       	cpc	r19, r1
 2e2:	2c f4       	brge	.+10     	; 0x2ee <Dio_SetPinDirection+0x148>
 2e4:	8c 81       	ldd	r24, Y+4	; 0x04
 2e6:	9d 81       	ldd	r25, Y+5	; 0x05
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	61 f0       	breq	.+24     	; 0x304 <Dio_SetPinDirection+0x15e>
 2ec:	5a c0       	rjmp	.+180    	; 0x3a2 <Dio_SetPinDirection+0x1fc>
 2ee:	2c 81       	ldd	r18, Y+4	; 0x04
 2f0:	3d 81       	ldd	r19, Y+5	; 0x05
 2f2:	22 30       	cpi	r18, 0x02	; 2
 2f4:	31 05       	cpc	r19, r1
 2f6:	71 f1       	breq	.+92     	; 0x354 <Dio_SetPinDirection+0x1ae>
 2f8:	8c 81       	ldd	r24, Y+4	; 0x04
 2fa:	9d 81       	ldd	r25, Y+5	; 0x05
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	91 05       	cpc	r25, r1
 300:	e9 f1       	breq	.+122    	; 0x37c <Dio_SetPinDirection+0x1d6>
 302:	4f c0       	rjmp	.+158    	; 0x3a2 <Dio_SetPinDirection+0x1fc>
		{
		case GroupA: set_bit(DDRA, PinNo); break;
 304:	aa e3       	ldi	r26, 0x3A	; 58
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	ea e3       	ldi	r30, 0x3A	; 58
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	48 2f       	mov	r20, r24
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 2e       	mov	r0, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <Dio_SetPinDirection+0x17c>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <Dio_SetPinDirection+0x178>
 326:	84 2b       	or	r24, r20
 328:	8c 93       	st	X, r24
 32a:	3b c0       	rjmp	.+118    	; 0x3a2 <Dio_SetPinDirection+0x1fc>
		case GroupB: set_bit(DDRB, PinNo); break;
 32c:	a7 e3       	ldi	r26, 0x37	; 55
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	e7 e3       	ldi	r30, 0x37	; 55
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	48 2f       	mov	r20, r24
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	28 2f       	mov	r18, r24
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 2e       	mov	r0, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <Dio_SetPinDirection+0x1a4>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <Dio_SetPinDirection+0x1a0>
 34e:	84 2b       	or	r24, r20
 350:	8c 93       	st	X, r24
 352:	27 c0       	rjmp	.+78     	; 0x3a2 <Dio_SetPinDirection+0x1fc>
		case GroupC: set_bit(DDRC, PinNo); break;
 354:	a4 e3       	ldi	r26, 0x34	; 52
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e4 e3       	ldi	r30, 0x34	; 52
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 2e       	mov	r0, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <Dio_SetPinDirection+0x1cc>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <Dio_SetPinDirection+0x1c8>
 376:	84 2b       	or	r24, r20
 378:	8c 93       	st	X, r24
 37a:	13 c0       	rjmp	.+38     	; 0x3a2 <Dio_SetPinDirection+0x1fc>
		case GroupD: set_bit(DDRD, PinNo); break;
 37c:	a1 e3       	ldi	r26, 0x31	; 49
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	e1 e3       	ldi	r30, 0x31	; 49
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	48 2f       	mov	r20, r24
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 2e       	mov	r0, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <Dio_SetPinDirection+0x1f4>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <Dio_SetPinDirection+0x1f0>
 39e:	84 2b       	or	r24, r20
 3a0:	8c 93       	st	X, r24
	else
	{
		//not reachable
	}

}
 3a2:	27 96       	adiw	r28, 0x07	; 7
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	de bf       	out	0x3e, r29	; 62
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	cd bf       	out	0x3d, r28	; 61
 3ae:	cf 91       	pop	r28
 3b0:	df 91       	pop	r29
 3b2:	08 95       	ret

000003b4 <Dio_SetPinValue>:
void Dio_SetPinValue(u8 GroupNo, u8 PinNo, u8 Value)
{
 3b4:	df 93       	push	r29
 3b6:	cf 93       	push	r28
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
 3bc:	27 97       	sbiw	r28, 0x07	; 7
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
 3c8:	89 83       	std	Y+1, r24	; 0x01
 3ca:	6a 83       	std	Y+2, r22	; 0x02
 3cc:	4b 83       	std	Y+3, r20	; 0x03
	if(Value==LOW)
 3ce:	8b 81       	ldd	r24, Y+3	; 0x03
 3d0:	88 23       	and	r24, r24
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <Dio_SetPinValue+0x22>
 3d4:	73 c0       	rjmp	.+230    	; 0x4bc <Dio_SetPinValue+0x108>
		{
			switch(GroupNo)
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	3f 83       	std	Y+7, r19	; 0x07
 3de:	2e 83       	std	Y+6, r18	; 0x06
 3e0:	8e 81       	ldd	r24, Y+6	; 0x06
 3e2:	9f 81       	ldd	r25, Y+7	; 0x07
 3e4:	81 30       	cpi	r24, 0x01	; 1
 3e6:	91 05       	cpc	r25, r1
 3e8:	59 f1       	breq	.+86     	; 0x440 <Dio_SetPinValue+0x8c>
 3ea:	2e 81       	ldd	r18, Y+6	; 0x06
 3ec:	3f 81       	ldd	r19, Y+7	; 0x07
 3ee:	22 30       	cpi	r18, 0x02	; 2
 3f0:	31 05       	cpc	r19, r1
 3f2:	2c f4       	brge	.+10     	; 0x3fe <Dio_SetPinValue+0x4a>
 3f4:	8e 81       	ldd	r24, Y+6	; 0x06
 3f6:	9f 81       	ldd	r25, Y+7	; 0x07
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	69 f0       	breq	.+26     	; 0x416 <Dio_SetPinValue+0x62>
 3fc:	5f c0       	rjmp	.+190    	; 0x4bc <Dio_SetPinValue+0x108>
 3fe:	2e 81       	ldd	r18, Y+6	; 0x06
 400:	3f 81       	ldd	r19, Y+7	; 0x07
 402:	22 30       	cpi	r18, 0x02	; 2
 404:	31 05       	cpc	r19, r1
 406:	89 f1       	breq	.+98     	; 0x46a <Dio_SetPinValue+0xb6>
 408:	8e 81       	ldd	r24, Y+6	; 0x06
 40a:	9f 81       	ldd	r25, Y+7	; 0x07
 40c:	83 30       	cpi	r24, 0x03	; 3
 40e:	91 05       	cpc	r25, r1
 410:	09 f4       	brne	.+2      	; 0x414 <Dio_SetPinValue+0x60>
 412:	40 c0       	rjmp	.+128    	; 0x494 <Dio_SetPinValue+0xe0>
 414:	53 c0       	rjmp	.+166    	; 0x4bc <Dio_SetPinValue+0x108>
			{
			case GroupA: clear_bit(PORTA, PinNo); break;
 416:	ab e3       	ldi	r26, 0x3B	; 59
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	eb e3       	ldi	r30, 0x3B	; 59
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 2e       	mov	r0, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <Dio_SetPinValue+0x80>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <Dio_SetPinValue+0x7c>
 438:	80 95       	com	r24
 43a:	84 23       	and	r24, r20
 43c:	8c 93       	st	X, r24
 43e:	3e c0       	rjmp	.+124    	; 0x4bc <Dio_SetPinValue+0x108>
			case GroupB: clear_bit(PORTB, PinNo); break;
 440:	a8 e3       	ldi	r26, 0x38	; 56
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	e8 e3       	ldi	r30, 0x38	; 56
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	48 2f       	mov	r20, r24
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	28 2f       	mov	r18, r24
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 2e       	mov	r0, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <Dio_SetPinValue+0xaa>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	0a 94       	dec	r0
 460:	e2 f7       	brpl	.-8      	; 0x45a <Dio_SetPinValue+0xa6>
 462:	80 95       	com	r24
 464:	84 23       	and	r24, r20
 466:	8c 93       	st	X, r24
 468:	29 c0       	rjmp	.+82     	; 0x4bc <Dio_SetPinValue+0x108>
			case GroupC: clear_bit(PORTC, PinNo); break;
 46a:	a5 e3       	ldi	r26, 0x35	; 53
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	e5 e3       	ldi	r30, 0x35	; 53
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	48 2f       	mov	r20, r24
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 2e       	mov	r0, r18
 482:	02 c0       	rjmp	.+4      	; 0x488 <Dio_SetPinValue+0xd4>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	0a 94       	dec	r0
 48a:	e2 f7       	brpl	.-8      	; 0x484 <Dio_SetPinValue+0xd0>
 48c:	80 95       	com	r24
 48e:	84 23       	and	r24, r20
 490:	8c 93       	st	X, r24
 492:	14 c0       	rjmp	.+40     	; 0x4bc <Dio_SetPinValue+0x108>
			case GroupD: clear_bit(PORTD, PinNo); break;
 494:	a2 e3       	ldi	r26, 0x32	; 50
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	e2 e3       	ldi	r30, 0x32	; 50
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 2e       	mov	r0, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <Dio_SetPinValue+0xfe>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <Dio_SetPinValue+0xfa>
 4b6:	80 95       	com	r24
 4b8:	84 23       	and	r24, r20
 4ba:	8c 93       	st	X, r24
			}
		}
		if(Value==HIGH)
 4bc:	8b 81       	ldd	r24, Y+3	; 0x03
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <Dio_SetPinValue+0x110>
 4c2:	6e c0       	rjmp	.+220    	; 0x5a0 <Dio_SetPinValue+0x1ec>
		{
			switch(GroupNo)
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	3d 83       	std	Y+5, r19	; 0x05
 4cc:	2c 83       	std	Y+4, r18	; 0x04
 4ce:	8c 81       	ldd	r24, Y+4	; 0x04
 4d0:	9d 81       	ldd	r25, Y+5	; 0x05
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	91 05       	cpc	r25, r1
 4d6:	49 f1       	breq	.+82     	; 0x52a <Dio_SetPinValue+0x176>
 4d8:	2c 81       	ldd	r18, Y+4	; 0x04
 4da:	3d 81       	ldd	r19, Y+5	; 0x05
 4dc:	22 30       	cpi	r18, 0x02	; 2
 4de:	31 05       	cpc	r19, r1
 4e0:	2c f4       	brge	.+10     	; 0x4ec <Dio_SetPinValue+0x138>
 4e2:	8c 81       	ldd	r24, Y+4	; 0x04
 4e4:	9d 81       	ldd	r25, Y+5	; 0x05
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	61 f0       	breq	.+24     	; 0x502 <Dio_SetPinValue+0x14e>
 4ea:	5a c0       	rjmp	.+180    	; 0x5a0 <Dio_SetPinValue+0x1ec>
 4ec:	2c 81       	ldd	r18, Y+4	; 0x04
 4ee:	3d 81       	ldd	r19, Y+5	; 0x05
 4f0:	22 30       	cpi	r18, 0x02	; 2
 4f2:	31 05       	cpc	r19, r1
 4f4:	71 f1       	breq	.+92     	; 0x552 <Dio_SetPinValue+0x19e>
 4f6:	8c 81       	ldd	r24, Y+4	; 0x04
 4f8:	9d 81       	ldd	r25, Y+5	; 0x05
 4fa:	83 30       	cpi	r24, 0x03	; 3
 4fc:	91 05       	cpc	r25, r1
 4fe:	e9 f1       	breq	.+122    	; 0x57a <Dio_SetPinValue+0x1c6>
 500:	4f c0       	rjmp	.+158    	; 0x5a0 <Dio_SetPinValue+0x1ec>
			{
			case GroupA: set_bit(PORTA, PinNo); break;
 502:	ab e3       	ldi	r26, 0x3B	; 59
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	eb e3       	ldi	r30, 0x3B	; 59
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	48 2f       	mov	r20, r24
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 2e       	mov	r0, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <Dio_SetPinValue+0x16c>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <Dio_SetPinValue+0x168>
 524:	84 2b       	or	r24, r20
 526:	8c 93       	st	X, r24
 528:	3b c0       	rjmp	.+118    	; 0x5a0 <Dio_SetPinValue+0x1ec>
			case GroupB: set_bit(PORTB, PinNo); break;
 52a:	a8 e3       	ldi	r26, 0x38	; 56
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	e8 e3       	ldi	r30, 0x38	; 56
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	48 2f       	mov	r20, r24
 536:	8a 81       	ldd	r24, Y+2	; 0x02
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 2e       	mov	r0, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <Dio_SetPinValue+0x194>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <Dio_SetPinValue+0x190>
 54c:	84 2b       	or	r24, r20
 54e:	8c 93       	st	X, r24
 550:	27 c0       	rjmp	.+78     	; 0x5a0 <Dio_SetPinValue+0x1ec>
			case GroupC: set_bit(PORTC, PinNo); break;
 552:	a5 e3       	ldi	r26, 0x35	; 53
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e5 e3       	ldi	r30, 0x35	; 53
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	48 2f       	mov	r20, r24
 55e:	8a 81       	ldd	r24, Y+2	; 0x02
 560:	28 2f       	mov	r18, r24
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 2e       	mov	r0, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <Dio_SetPinValue+0x1bc>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <Dio_SetPinValue+0x1b8>
 574:	84 2b       	or	r24, r20
 576:	8c 93       	st	X, r24
 578:	13 c0       	rjmp	.+38     	; 0x5a0 <Dio_SetPinValue+0x1ec>
			case GroupD: set_bit(PORTD, PinNo); break;
 57a:	a2 e3       	ldi	r26, 0x32	; 50
 57c:	b0 e0       	ldi	r27, 0x00	; 0
 57e:	e2 e3       	ldi	r30, 0x32	; 50
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	48 2f       	mov	r20, r24
 586:	8a 81       	ldd	r24, Y+2	; 0x02
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 2e       	mov	r0, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <Dio_SetPinValue+0x1e4>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <Dio_SetPinValue+0x1e0>
 59c:	84 2b       	or	r24, r20
 59e:	8c 93       	st	X, r24
			}
		}
}
 5a0:	27 96       	adiw	r28, 0x07	; 7
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	de bf       	out	0x3e, r29	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	cd bf       	out	0x3d, r28	; 61
 5ac:	cf 91       	pop	r28
 5ae:	df 91       	pop	r29
 5b0:	08 95       	ret

000005b2 <Dio_GetPinValue>:
u8 Dio_GetPinValue(u8 GroupNo, u8 PinNo)
{
 5b2:	df 93       	push	r29
 5b4:	cf 93       	push	r28
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <Dio_GetPinValue+0x6>
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <Dio_GetPinValue+0x8>
 5ba:	0f 92       	push	r0
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	8a 83       	std	Y+2, r24	; 0x02
 5c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_value;
	switch(GroupNo)
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	3d 83       	std	Y+5, r19	; 0x05
 5cc:	2c 83       	std	Y+4, r18	; 0x04
 5ce:	4c 81       	ldd	r20, Y+4	; 0x04
 5d0:	5d 81       	ldd	r21, Y+5	; 0x05
 5d2:	41 30       	cpi	r20, 0x01	; 1
 5d4:	51 05       	cpc	r21, r1
 5d6:	41 f1       	breq	.+80     	; 0x628 <Dio_GetPinValue+0x76>
 5d8:	8c 81       	ldd	r24, Y+4	; 0x04
 5da:	9d 81       	ldd	r25, Y+5	; 0x05
 5dc:	82 30       	cpi	r24, 0x02	; 2
 5de:	91 05       	cpc	r25, r1
 5e0:	34 f4       	brge	.+12     	; 0x5ee <Dio_GetPinValue+0x3c>
 5e2:	2c 81       	ldd	r18, Y+4	; 0x04
 5e4:	3d 81       	ldd	r19, Y+5	; 0x05
 5e6:	21 15       	cp	r18, r1
 5e8:	31 05       	cpc	r19, r1
 5ea:	61 f0       	breq	.+24     	; 0x604 <Dio_GetPinValue+0x52>
 5ec:	52 c0       	rjmp	.+164    	; 0x692 <Dio_GetPinValue+0xe0>
 5ee:	4c 81       	ldd	r20, Y+4	; 0x04
 5f0:	5d 81       	ldd	r21, Y+5	; 0x05
 5f2:	42 30       	cpi	r20, 0x02	; 2
 5f4:	51 05       	cpc	r21, r1
 5f6:	51 f1       	breq	.+84     	; 0x64c <Dio_GetPinValue+0x9a>
 5f8:	8c 81       	ldd	r24, Y+4	; 0x04
 5fa:	9d 81       	ldd	r25, Y+5	; 0x05
 5fc:	83 30       	cpi	r24, 0x03	; 3
 5fe:	91 05       	cpc	r25, r1
 600:	b9 f1       	breq	.+110    	; 0x670 <Dio_GetPinValue+0xbe>
 602:	47 c0       	rjmp	.+142    	; 0x692 <Dio_GetPinValue+0xe0>
	{
	case GroupA: ret_value=get_bit(PINA, PinNo); break;
 604:	e9 e3       	ldi	r30, 0x39	; 57
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	8b 81       	ldd	r24, Y+3	; 0x03
 610:	88 2f       	mov	r24, r24
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	a9 01       	movw	r20, r18
 616:	02 c0       	rjmp	.+4      	; 0x61c <Dio_GetPinValue+0x6a>
 618:	55 95       	asr	r21
 61a:	47 95       	ror	r20
 61c:	8a 95       	dec	r24
 61e:	e2 f7       	brpl	.-8      	; 0x618 <Dio_GetPinValue+0x66>
 620:	ca 01       	movw	r24, r20
 622:	81 70       	andi	r24, 0x01	; 1
 624:	89 83       	std	Y+1, r24	; 0x01
 626:	35 c0       	rjmp	.+106    	; 0x692 <Dio_GetPinValue+0xe0>
	case GroupB: ret_value=get_bit(PINB, PinNo); break;
 628:	e6 e3       	ldi	r30, 0x36	; 54
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	28 2f       	mov	r18, r24
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	88 2f       	mov	r24, r24
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	a9 01       	movw	r20, r18
 63a:	02 c0       	rjmp	.+4      	; 0x640 <Dio_GetPinValue+0x8e>
 63c:	55 95       	asr	r21
 63e:	47 95       	ror	r20
 640:	8a 95       	dec	r24
 642:	e2 f7       	brpl	.-8      	; 0x63c <Dio_GetPinValue+0x8a>
 644:	ca 01       	movw	r24, r20
 646:	81 70       	andi	r24, 0x01	; 1
 648:	89 83       	std	Y+1, r24	; 0x01
 64a:	23 c0       	rjmp	.+70     	; 0x692 <Dio_GetPinValue+0xe0>
	case GroupC: ret_value=get_bit(PINC, PinNo); break;
 64c:	e3 e3       	ldi	r30, 0x33	; 51
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	28 2f       	mov	r18, r24
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	8b 81       	ldd	r24, Y+3	; 0x03
 658:	88 2f       	mov	r24, r24
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	a9 01       	movw	r20, r18
 65e:	02 c0       	rjmp	.+4      	; 0x664 <Dio_GetPinValue+0xb2>
 660:	55 95       	asr	r21
 662:	47 95       	ror	r20
 664:	8a 95       	dec	r24
 666:	e2 f7       	brpl	.-8      	; 0x660 <Dio_GetPinValue+0xae>
 668:	ca 01       	movw	r24, r20
 66a:	81 70       	andi	r24, 0x01	; 1
 66c:	89 83       	std	Y+1, r24	; 0x01
 66e:	11 c0       	rjmp	.+34     	; 0x692 <Dio_GetPinValue+0xe0>
	case GroupD: ret_value=get_bit(PIND, PinNo); break;
 670:	e0 e3       	ldi	r30, 0x30	; 48
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	28 2f       	mov	r18, r24
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	8b 81       	ldd	r24, Y+3	; 0x03
 67c:	88 2f       	mov	r24, r24
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	a9 01       	movw	r20, r18
 682:	02 c0       	rjmp	.+4      	; 0x688 <Dio_GetPinValue+0xd6>
 684:	55 95       	asr	r21
 686:	47 95       	ror	r20
 688:	8a 95       	dec	r24
 68a:	e2 f7       	brpl	.-8      	; 0x684 <Dio_GetPinValue+0xd2>
 68c:	ca 01       	movw	r24, r20
 68e:	81 70       	andi	r24, 0x01	; 1
 690:	89 83       	std	Y+1, r24	; 0x01
	}

return ret_value;
 692:	89 81       	ldd	r24, Y+1	; 0x01
}
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	cf 91       	pop	r28
 6a0:	df 91       	pop	r29
 6a2:	08 95       	ret

000006a4 <EXTERNAL_INTRUPT_INIT>:
#include "avr/interrupt.h"


#include "EXTERNAL_INTRUPT.h"

void EXTERNAL_INTRUPT_INIT(){
 6a4:	df 93       	push	r29
 6a6:	cf 93       	push	r28
 6a8:	cd b7       	in	r28, 0x3d	; 61
 6aa:	de b7       	in	r29, 0x3e	; 62

	set_bit(SREG, 7); // set GIE -> 1
 6ac:	af e5       	ldi	r26, 0x5F	; 95
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 6b0:	ef e5       	ldi	r30, 0x5F	; 95
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	80 68       	ori	r24, 0x80	; 128
 6b8:	8c 93       	st	X, r24

	set_bit(GICR, 6); // set PIE 0 -> 1
 6ba:	ab e5       	ldi	r26, 0x5B	; 91
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	eb e5       	ldi	r30, 0x5B	; 91
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	80 81       	ld	r24, Z
 6c4:	80 64       	ori	r24, 0x40	; 64
 6c6:	8c 93       	st	X, r24

	set_bit(MCUCR, 0);
 6c8:	a5 e5       	ldi	r26, 0x55	; 85
 6ca:	b0 e0       	ldi	r27, 0x00	; 0
 6cc:	e5 e5       	ldi	r30, 0x55	; 85
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	81 60       	ori	r24, 0x01	; 1
 6d4:	8c 93       	st	X, r24
	set_bit(MCUCR, 1); // raising
 6d6:	a5 e5       	ldi	r26, 0x55	; 85
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	e5 e5       	ldi	r30, 0x55	; 85
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	82 60       	ori	r24, 0x02	; 2
 6e2:	8c 93       	st	X, r24

	Dio_SetPinDirection(GroupC, PIN2, OUTPUT);
 6e4:	82 e0       	ldi	r24, 0x02	; 2
 6e6:	62 e0       	ldi	r22, 0x02	; 2
 6e8:	41 e0       	ldi	r20, 0x01	; 1
 6ea:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Dio_SetPinDirection>

}
 6ee:	cf 91       	pop	r28
 6f0:	df 91       	pop	r29
 6f2:	08 95       	ret

000006f4 <__vector_1>:

ISR(INT0_vect)
{
 6f4:	1f 92       	push	r1
 6f6:	0f 92       	push	r0
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	0f 92       	push	r0
 6fc:	11 24       	eor	r1, r1
 6fe:	8f 93       	push	r24
 700:	9f 93       	push	r25
 702:	af 93       	push	r26
 704:	bf 93       	push	r27
 706:	ef 93       	push	r30
 708:	ff 93       	push	r31
 70a:	df 93       	push	r29
 70c:	cf 93       	push	r28
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62

	toggle_bit(PORTC, 2);
 712:	a5 e3       	ldi	r26, 0x35	; 53
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	e5 e3       	ldi	r30, 0x35	; 53
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	90 81       	ld	r25, Z
 71c:	84 e0       	ldi	r24, 0x04	; 4
 71e:	89 27       	eor	r24, r25
 720:	8c 93       	st	X, r24

//	_delay_ms(500);
}
 722:	cf 91       	pop	r28
 724:	df 91       	pop	r29
 726:	ff 91       	pop	r31
 728:	ef 91       	pop	r30
 72a:	bf 91       	pop	r27
 72c:	af 91       	pop	r26
 72e:	9f 91       	pop	r25
 730:	8f 91       	pop	r24
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <LED0_Init>:

#include "LED_INIT.h"

/// led 0
void LED0_Init()
{
 73c:	df 93       	push	r29
 73e:	cf 93       	push	r28
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(GroupC, PIN2, OUTPUT);
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	62 e0       	ldi	r22, 0x02	; 2
 748:	41 e0       	ldi	r20, 0x01	; 1
 74a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Dio_SetPinDirection>
}
 74e:	cf 91       	pop	r28
 750:	df 91       	pop	r29
 752:	08 95       	ret

00000754 <LED0_ON>:

void LED0_ON()
{
 754:	df 93       	push	r29
 756:	cf 93       	push	r28
 758:	cd b7       	in	r28, 0x3d	; 61
 75a:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupC, PIN2, HIGH);
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	62 e0       	ldi	r22, 0x02	; 2
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Dio_SetPinValue>
}
 766:	cf 91       	pop	r28
 768:	df 91       	pop	r29
 76a:	08 95       	ret

0000076c <LED0_OFF>:

void LED0_OFF()
{
 76c:	df 93       	push	r29
 76e:	cf 93       	push	r28
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupC, PIN2, LOW);
 774:	82 e0       	ldi	r24, 0x02	; 2
 776:	62 e0       	ldi	r22, 0x02	; 2
 778:	40 e0       	ldi	r20, 0x00	; 0
 77a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Dio_SetPinValue>

}
 77e:	cf 91       	pop	r28
 780:	df 91       	pop	r29
 782:	08 95       	ret

00000784 <LED1_Init>:

/// led 1
void LED1_Init()
{
 784:	df 93       	push	r29
 786:	cf 93       	push	r28
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(GroupC, PIN7, OUTPUT);
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	67 e0       	ldi	r22, 0x07	; 7
 790:	41 e0       	ldi	r20, 0x01	; 1
 792:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Dio_SetPinDirection>
}
 796:	cf 91       	pop	r28
 798:	df 91       	pop	r29
 79a:	08 95       	ret

0000079c <LED1_ON>:

void LED1_ON()
{
 79c:	df 93       	push	r29
 79e:	cf 93       	push	r28
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupC, PIN7, HIGH);
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	67 e0       	ldi	r22, 0x07	; 7
 7a8:	41 e0       	ldi	r20, 0x01	; 1
 7aa:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Dio_SetPinValue>
}
 7ae:	cf 91       	pop	r28
 7b0:	df 91       	pop	r29
 7b2:	08 95       	ret

000007b4 <LED1_OFF>:

void LED1_OFF()
{
 7b4:	df 93       	push	r29
 7b6:	cf 93       	push	r28
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupC, PIN7, LOW);
 7bc:	82 e0       	ldi	r24, 0x02	; 2
 7be:	67 e0       	ldi	r22, 0x07	; 7
 7c0:	40 e0       	ldi	r20, 0x00	; 0
 7c2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Dio_SetPinValue>
}
 7c6:	cf 91       	pop	r28
 7c8:	df 91       	pop	r29
 7ca:	08 95       	ret

000007cc <LED2_Init>:

/// led 2
void LED2_Init()
{
 7cc:	df 93       	push	r29
 7ce:	cf 93       	push	r28
 7d0:	cd b7       	in	r28, 0x3d	; 61
 7d2:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(GroupD, PIN3, OUTPUT);
 7d4:	83 e0       	ldi	r24, 0x03	; 3
 7d6:	63 e0       	ldi	r22, 0x03	; 3
 7d8:	41 e0       	ldi	r20, 0x01	; 1
 7da:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Dio_SetPinDirection>
}
 7de:	cf 91       	pop	r28
 7e0:	df 91       	pop	r29
 7e2:	08 95       	ret

000007e4 <LED2_ON>:

void LED2_ON()
{
 7e4:	df 93       	push	r29
 7e6:	cf 93       	push	r28
 7e8:	cd b7       	in	r28, 0x3d	; 61
 7ea:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupD, PIN3, HIGH);
 7ec:	83 e0       	ldi	r24, 0x03	; 3
 7ee:	63 e0       	ldi	r22, 0x03	; 3
 7f0:	41 e0       	ldi	r20, 0x01	; 1
 7f2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Dio_SetPinValue>
}
 7f6:	cf 91       	pop	r28
 7f8:	df 91       	pop	r29
 7fa:	08 95       	ret

000007fc <LED2_OFF>:

void LED2_OFF()
{
 7fc:	df 93       	push	r29
 7fe:	cf 93       	push	r28
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupD, PIN3, LOW);
 804:	83 e0       	ldi	r24, 0x03	; 3
 806:	63 e0       	ldi	r22, 0x03	; 3
 808:	40 e0       	ldi	r20, 0x00	; 0
 80a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Dio_SetPinValue>

}
 80e:	cf 91       	pop	r28
 810:	df 91       	pop	r29
 812:	08 95       	ret

00000814 <main>:
#include "utilities.h"
#include "ADC_init.h"
#include "LED_INIT.h"

int main(int argc, char **argv)
{
 814:	df 93       	push	r29
 816:	cf 93       	push	r28
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
 81c:	2c 97       	sbiw	r28, 0x0c	; 12
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	f8 94       	cli
 822:	de bf       	out	0x3e, r29	; 62
 824:	0f be       	out	0x3f, r0	; 63
 826:	cd bf       	out	0x3d, r28	; 61
 828:	9a 87       	std	Y+10, r25	; 0x0a
 82a:	89 87       	std	Y+9, r24	; 0x09
 82c:	7c 87       	std	Y+12, r23	; 0x0c
 82e:	6b 87       	std	Y+11, r22	; 0x0b

	void LED0_Init();
	void LED1_Init();
	void LED2_Init();

	ADC_INIT();
 830:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_INIT>

	while(1){

		digital_value = ADC_READ();
 834:	0e 94 91 00 	call	0x122	; 0x122 <ADC_READ>
 838:	cc 01       	movw	r24, r24
 83a:	a0 e0       	ldi	r26, 0x00	; 0
 83c:	b0 e0       	ldi	r27, 0x00	; 0
 83e:	89 83       	std	Y+1, r24	; 0x01
 840:	9a 83       	std	Y+2, r25	; 0x02
 842:	ab 83       	std	Y+3, r26	; 0x03
 844:	bc 83       	std	Y+4, r27	; 0x04

		analog_value = (digital_value * 5 * 1000) / 1023;
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	9a 81       	ldd	r25, Y+2	; 0x02
 84a:	ab 81       	ldd	r26, Y+3	; 0x03
 84c:	bc 81       	ldd	r27, Y+4	; 0x04
 84e:	28 e8       	ldi	r18, 0x88	; 136
 850:	33 e1       	ldi	r19, 0x13	; 19
 852:	40 e0       	ldi	r20, 0x00	; 0
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	bc 01       	movw	r22, r24
 858:	cd 01       	movw	r24, r26
 85a:	0e 94 a4 04 	call	0x948	; 0x948 <__mulsi3>
 85e:	dc 01       	movw	r26, r24
 860:	cb 01       	movw	r24, r22
 862:	2f ef       	ldi	r18, 0xFF	; 255
 864:	33 e0       	ldi	r19, 0x03	; 3
 866:	40 e0       	ldi	r20, 0x00	; 0
 868:	50 e0       	ldi	r21, 0x00	; 0
 86a:	bc 01       	movw	r22, r24
 86c:	cd 01       	movw	r24, r26
 86e:	0e 94 c3 04 	call	0x986	; 0x986 <__udivmodsi4>
 872:	da 01       	movw	r26, r20
 874:	c9 01       	movw	r24, r18
 876:	8d 83       	std	Y+5, r24	; 0x05
 878:	9e 83       	std	Y+6, r25	; 0x06
 87a:	af 83       	std	Y+7, r26	; 0x07
 87c:	b8 87       	std	Y+8, r27	; 0x08

		if(analog_value >= 0 && analog_value < 1500){
 87e:	8d 81       	ldd	r24, Y+5	; 0x05
 880:	9e 81       	ldd	r25, Y+6	; 0x06
 882:	af 81       	ldd	r26, Y+7	; 0x07
 884:	b8 85       	ldd	r27, Y+8	; 0x08
 886:	8c 3d       	cpi	r24, 0xDC	; 220
 888:	25 e0       	ldi	r18, 0x05	; 5
 88a:	92 07       	cpc	r25, r18
 88c:	20 e0       	ldi	r18, 0x00	; 0
 88e:	a2 07       	cpc	r26, r18
 890:	20 e0       	ldi	r18, 0x00	; 0
 892:	b2 07       	cpc	r27, r18
 894:	38 f4       	brcc	.+14     	; 0x8a4 <__stack+0x45>
			LED0_OFF();
 896:	0e 94 b6 03 	call	0x76c	; 0x76c <LED0_OFF>
			LED1_OFF();
 89a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LED1_OFF>
			LED2_OFF();
 89e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LED2_OFF>
 8a2:	c8 cf       	rjmp	.-112    	; 0x834 <main+0x20>
		}else if(analog_value >= 1500 && analog_value < 2500){
 8a4:	8d 81       	ldd	r24, Y+5	; 0x05
 8a6:	9e 81       	ldd	r25, Y+6	; 0x06
 8a8:	af 81       	ldd	r26, Y+7	; 0x07
 8aa:	b8 85       	ldd	r27, Y+8	; 0x08
 8ac:	8c 3d       	cpi	r24, 0xDC	; 220
 8ae:	25 e0       	ldi	r18, 0x05	; 5
 8b0:	92 07       	cpc	r25, r18
 8b2:	20 e0       	ldi	r18, 0x00	; 0
 8b4:	a2 07       	cpc	r26, r18
 8b6:	20 e0       	ldi	r18, 0x00	; 0
 8b8:	b2 07       	cpc	r27, r18
 8ba:	98 f0       	brcs	.+38     	; 0x8e2 <__stack+0x83>
 8bc:	8d 81       	ldd	r24, Y+5	; 0x05
 8be:	9e 81       	ldd	r25, Y+6	; 0x06
 8c0:	af 81       	ldd	r26, Y+7	; 0x07
 8c2:	b8 85       	ldd	r27, Y+8	; 0x08
 8c4:	84 3c       	cpi	r24, 0xC4	; 196
 8c6:	29 e0       	ldi	r18, 0x09	; 9
 8c8:	92 07       	cpc	r25, r18
 8ca:	20 e0       	ldi	r18, 0x00	; 0
 8cc:	a2 07       	cpc	r26, r18
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	b2 07       	cpc	r27, r18
 8d2:	38 f4       	brcc	.+14     	; 0x8e2 <__stack+0x83>
			LED0_ON();
 8d4:	0e 94 aa 03 	call	0x754	; 0x754 <LED0_ON>
			LED1_OFF();
 8d8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <LED1_OFF>
			LED2_OFF();
 8dc:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LED2_OFF>
 8e0:	a9 cf       	rjmp	.-174    	; 0x834 <main+0x20>
		}else if(analog_value >= 2500 && analog_value < 3000){
 8e2:	8d 81       	ldd	r24, Y+5	; 0x05
 8e4:	9e 81       	ldd	r25, Y+6	; 0x06
 8e6:	af 81       	ldd	r26, Y+7	; 0x07
 8e8:	b8 85       	ldd	r27, Y+8	; 0x08
 8ea:	84 3c       	cpi	r24, 0xC4	; 196
 8ec:	29 e0       	ldi	r18, 0x09	; 9
 8ee:	92 07       	cpc	r25, r18
 8f0:	20 e0       	ldi	r18, 0x00	; 0
 8f2:	a2 07       	cpc	r26, r18
 8f4:	20 e0       	ldi	r18, 0x00	; 0
 8f6:	b2 07       	cpc	r27, r18
 8f8:	98 f0       	brcs	.+38     	; 0x920 <__stack+0xc1>
 8fa:	8d 81       	ldd	r24, Y+5	; 0x05
 8fc:	9e 81       	ldd	r25, Y+6	; 0x06
 8fe:	af 81       	ldd	r26, Y+7	; 0x07
 900:	b8 85       	ldd	r27, Y+8	; 0x08
 902:	88 3b       	cpi	r24, 0xB8	; 184
 904:	2b e0       	ldi	r18, 0x0B	; 11
 906:	92 07       	cpc	r25, r18
 908:	20 e0       	ldi	r18, 0x00	; 0
 90a:	a2 07       	cpc	r26, r18
 90c:	20 e0       	ldi	r18, 0x00	; 0
 90e:	b2 07       	cpc	r27, r18
 910:	38 f4       	brcc	.+14     	; 0x920 <__stack+0xc1>
			LED0_ON();
 912:	0e 94 aa 03 	call	0x754	; 0x754 <LED0_ON>
			LED1_ON();
 916:	0e 94 ce 03 	call	0x79c	; 0x79c <LED1_ON>
			LED2_OFF();
 91a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LED2_OFF>
 91e:	8a cf       	rjmp	.-236    	; 0x834 <main+0x20>
		} else if(analog_value >= 3000){
 920:	8d 81       	ldd	r24, Y+5	; 0x05
 922:	9e 81       	ldd	r25, Y+6	; 0x06
 924:	af 81       	ldd	r26, Y+7	; 0x07
 926:	b8 85       	ldd	r27, Y+8	; 0x08
 928:	88 3b       	cpi	r24, 0xB8	; 184
 92a:	2b e0       	ldi	r18, 0x0B	; 11
 92c:	92 07       	cpc	r25, r18
 92e:	20 e0       	ldi	r18, 0x00	; 0
 930:	a2 07       	cpc	r26, r18
 932:	20 e0       	ldi	r18, 0x00	; 0
 934:	b2 07       	cpc	r27, r18
 936:	08 f4       	brcc	.+2      	; 0x93a <__stack+0xdb>
 938:	7d cf       	rjmp	.-262    	; 0x834 <main+0x20>
			LED0_ON();
 93a:	0e 94 aa 03 	call	0x754	; 0x754 <LED0_ON>
			LED1_ON();
 93e:	0e 94 ce 03 	call	0x79c	; 0x79c <LED1_ON>
			LED2_ON();
 942:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LED2_ON>
 946:	76 cf       	rjmp	.-276    	; 0x834 <main+0x20>

00000948 <__mulsi3>:
 948:	62 9f       	mul	r22, r18
 94a:	d0 01       	movw	r26, r0
 94c:	73 9f       	mul	r23, r19
 94e:	f0 01       	movw	r30, r0
 950:	82 9f       	mul	r24, r18
 952:	e0 0d       	add	r30, r0
 954:	f1 1d       	adc	r31, r1
 956:	64 9f       	mul	r22, r20
 958:	e0 0d       	add	r30, r0
 95a:	f1 1d       	adc	r31, r1
 95c:	92 9f       	mul	r25, r18
 95e:	f0 0d       	add	r31, r0
 960:	83 9f       	mul	r24, r19
 962:	f0 0d       	add	r31, r0
 964:	74 9f       	mul	r23, r20
 966:	f0 0d       	add	r31, r0
 968:	65 9f       	mul	r22, r21
 96a:	f0 0d       	add	r31, r0
 96c:	99 27       	eor	r25, r25
 96e:	72 9f       	mul	r23, r18
 970:	b0 0d       	add	r27, r0
 972:	e1 1d       	adc	r30, r1
 974:	f9 1f       	adc	r31, r25
 976:	63 9f       	mul	r22, r19
 978:	b0 0d       	add	r27, r0
 97a:	e1 1d       	adc	r30, r1
 97c:	f9 1f       	adc	r31, r25
 97e:	bd 01       	movw	r22, r26
 980:	cf 01       	movw	r24, r30
 982:	11 24       	eor	r1, r1
 984:	08 95       	ret

00000986 <__udivmodsi4>:
 986:	a1 e2       	ldi	r26, 0x21	; 33
 988:	1a 2e       	mov	r1, r26
 98a:	aa 1b       	sub	r26, r26
 98c:	bb 1b       	sub	r27, r27
 98e:	fd 01       	movw	r30, r26
 990:	0d c0       	rjmp	.+26     	; 0x9ac <__udivmodsi4_ep>

00000992 <__udivmodsi4_loop>:
 992:	aa 1f       	adc	r26, r26
 994:	bb 1f       	adc	r27, r27
 996:	ee 1f       	adc	r30, r30
 998:	ff 1f       	adc	r31, r31
 99a:	a2 17       	cp	r26, r18
 99c:	b3 07       	cpc	r27, r19
 99e:	e4 07       	cpc	r30, r20
 9a0:	f5 07       	cpc	r31, r21
 9a2:	20 f0       	brcs	.+8      	; 0x9ac <__udivmodsi4_ep>
 9a4:	a2 1b       	sub	r26, r18
 9a6:	b3 0b       	sbc	r27, r19
 9a8:	e4 0b       	sbc	r30, r20
 9aa:	f5 0b       	sbc	r31, r21

000009ac <__udivmodsi4_ep>:
 9ac:	66 1f       	adc	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	1a 94       	dec	r1
 9b6:	69 f7       	brne	.-38     	; 0x992 <__udivmodsi4_loop>
 9b8:	60 95       	com	r22
 9ba:	70 95       	com	r23
 9bc:	80 95       	com	r24
 9be:	90 95       	com	r25
 9c0:	9b 01       	movw	r18, r22
 9c2:	ac 01       	movw	r20, r24
 9c4:	bd 01       	movw	r22, r26
 9c6:	cf 01       	movw	r24, r30
 9c8:	08 95       	ret

000009ca <_exit>:
 9ca:	f8 94       	cli

000009cc <__stop_program>:
 9cc:	ff cf       	rjmp	.-2      	; 0x9cc <__stop_program>
